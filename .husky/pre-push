#!/usr/bin/env sh

# An example hook script to verify what is about to be pushed.  Called by "git

# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

short_commit_pattern="^[0-9a-f]{8,9}"

get_commit_list() {
	# Patterns
	local validate_commit_pattern="^(feat|fix|chg|del|dep|sec|ver)(?:\(([\w\\$\.\-\*\s]*)\))?:\s.{3,}"

	# Filter commits
	commit_log_oneline=$(git rev-list --oneline "$range" --grep "$validate_commit_pattern" -P -i --invert-grep)

	echo "$commit_log_oneline" | grep -viE "$short_commit_pattern (Merge|int:)"
}

sha_oneline() {
	echo "$1" | grep -Po "$short_commit_pattern"
}

repeatUntil() {
  printf "$1%.0s" $(seq 1 $2)
}

printYellow() {
	printf "\033[33m$@\033[m"
}

printBlue() {
	printf "\033[34;1m$@\033[m"
}

printGray() {
  printf "\033[90m$@\033[m"
}

printRed() {
	printf "\033[31m$@\033[m"
}

printGreen() {
	printf "\033[32;1m$@\033[m"
}

printCyan() {
	printf "\033[36;1m$@\033[m"
}

printFormat() {
  local text="$1"
  shift
  printf "[$text] %s\n" "$@"
}

printSuccess() {
  printFormat "$(printGreen " SUCCESS ")" "$@"
}

printInfo() {
  printFormat "$(printBlue " INFO ")" "$@"
}

printTip() {
  printFormat "$(printCyan " TIP ")" "$@"
}

printError() {
  printf >&2 "[$(printRed " ERROR ")] %s\n" "$@"
}

printErrorList() {
  while read commit; do
    local commit_hash=$(echo "$commit" | cut -d" " -f1)
    local commit_msg=$(echo "$commit" | cut -d" " -f2-)
    local commit_type=$(echo "$commit_msg" | cut -d":" -f1)
    local commit_desc=$(echo "$commit_msg" | cut -d":" -f2-)
    printError "$(printYellow "$commit_hash") $commit_type: $commit_desc"
    printError "$(repeatUntil " " ${#commit_hash}) $(repeatUntil "$(printRed "^")" ${#commit_type})"
  done<<<"$1"
}

while read local_ref local_oid remote_ref remote_oid; do
	# git_current_branch=$(git branch --show-current)
	# # remote_oid dont work in eclipse
	# remote_oid=$(git rev-parse origin/"$git_current_branch" 2> /dev/null || false)
	#
	# if [ "$?" -ne 0 ]
	# then
	#   remote_oid=$(git rev-parse origin/develop)
	# fi

	if test "$remote_oid" = "$zero"; then
		remote_oid=$(git rev-parse origin/develop)
	fi

	if test "$local_oid" = "$zero"; then
		# TODO: Handle delete
		:
	else
		range="$remote_oid..$local_oid"

		printf "\n"
		printInfo "Validating commit messages: $(printYellow $(sha_oneline "$remote_oid"))..$(printYellow $(sha_oneline "$local_oid"))"
		printTip "To skip validation for a single commit, employ this pattern: '$(printGray "int: <anything>")'"
		printf "\n"

		# Check for CHANGELOG commit
		if [ -n "$(get_commit_list)" ]; then
      printError "Commit found in '$(printBlue $(echo "$local_ref" | cut -d/ -f3-))' does not adhere to the pattern outlined in '$(printGray "Changelog procedures (Notion wiki)")', therefore it will not be pushed." 
			printError "Below are the commits that do not match the specified pattern:"
			printError ""
			printErrorList "$(get_commit_list)"
			printError ""
			exit 1
		fi

    printSuccess "Push commits successfully!"
    printf "\n"
	fi
done

exit 0
